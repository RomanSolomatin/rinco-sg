[
  {
    "tags": [],
    "description": {
      "full": "<p>rinco<br />Copyright(c) 2014 Allan Esquina<br />MIT Licensed</p>",
      "summary": "<p>rinco<br />Copyright(c) 2014 Allan Esquina<br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 2,
    "codeStart": 8,
    "code": "'use strict'\n\nvar dir = {};\nvar file = {};\nvar mkdirp = require('mkdirp');\nvar fs = require(\"fs\");\nvar sh = require('shelljs');\nvar path = require('path');\n\nvar config = require('./constants');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "test",
        "html": "<p>test</p>"
      },
      {
        "type": "class",
        "string": "test",
        "html": "<p>test</p>"
      },
      {
        "type": "bosta",
        "string": "test",
        "html": "<p>test</p>"
      },
      {
        "type": "example",
        "string": "\n    rinco.fs.dir.write('sandbox');",
        "html": "<pre><code>rinco.fs.dir.write(&#39;sandbox&#39;);\n</code></pre>"
      },
      {
        "type": "param",
        "string": "{String} Folder's name",
        "name": "Folder's",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean} True if succes",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>True if succes</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<p>Create a new folder.</p>",
      "summary": "<p>Create a new folder.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": true,
    "isEvent": false,
    "ignore": false,
    "line": 19,
    "codeStart": 32,
    "code": "dir.write = function (dirname) {\n    mkdirp.sync(dirname);\n    return true;\n};",
    "ctx": {
      "type": "method",
      "receiver": "dir",
      "name": "write",
      "string": "dir.write()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n    rinco.fs.dir.read('sandbox', function(filename) {});",
        "html": "<pre><code>rinco.fs.dir.read(&#39;sandbox&#39;, function(filename) {});\n</code></pre>"
      },
      {
        "type": "param",
        "string": "{String} Folder's name",
        "name": "Folder's",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{cb_dir}  - Callback",
        "name": "-",
        "description": "<p>Callback</p>",
        "types": [
          "cb_dir"
        ],
        "typesDescription": "<a href=\"cb_dir.html\">cb_dir</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean} True if succes",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>True if succes</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<p>Read a especific folder (recursive).</p>",
      "summary": "<p>Read a especific folder (recursive).</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 37,
    "codeStart": 49,
    "code": "dir.read = function (dirname, fn, dist) {\n    var file;\n    var origin = '';\n    var dist = dist || '';\n    origin = path.join(origin, dirname);\n    fs.readdir(origin, function (err, files) {\n        files.forEach(function (filename) {\n            if (fs.lstatSync(path.join(dirname, filename)).isDirectory()) {\n                dist = path.join(dist, filename);\n                dir.read(path.join(origin, filename), fn, dist);\n            } else {\n                (fn && fn.call && fn(filename, dist, origin));\n            }\n        });\n    });\n};",
    "ctx": {
      "type": "method",
      "receiver": "dir",
      "name": "read",
      "string": "dir.read()"
    }
  },
  {
    "tags": [
      {
        "type": "callback",
        "string": "cb_dir",
        "html": "<p>cb_dir</p>"
      },
      {
        "type": "param",
        "string": "{string} filename",
        "name": "filename",
        "description": "",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{string} filename</p>"
      }
    ],
    "description": {
      "full": "<p>Callback from module fs.dir.read</p>",
      "summary": "<p>Callback from module fs.dir.read</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 65,
    "codeStart": 70
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n    rinco.fs.dir.remove('sandbox');",
        "html": "<pre><code>rinco.fs.dir.remove(&#39;sandbox&#39;);\n</code></pre>"
      },
      {
        "type": "param",
        "string": "{String} Folder's name",
        "name": "Folder's",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{boolean} True if succes",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>True if succes</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<p>Remove a especific folder (recursive).<br />Files will be removed too.</p>",
      "summary": "<p>Remove a especific folder (recursive).<br />Files will be removed too.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 71,
    "codeStart": 82,
    "code": "dir.remove = function (path) {\n  if (fs.existsSync(path)) {\n    fs.readdirSync(path).forEach(function (file,index){\n      var curPath = path + \"/\" + file;\n      if (fs.lstatSync(curPath).isDirectory()) { // recurse\n        dir.remove(curPath);\n      } else { // delete file\n        fs.unlinkSync(curPath);\n      }\n    });\n    fs.rmdirSync(path);\n    return true;\n  }\n  return false;\n};",
    "ctx": {
      "type": "method",
      "receiver": "dir",
      "name": "remove",
      "string": "dir.remove()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n    rinco.fs.file.write('test.js');",
        "html": "<pre><code>rinco.fs.file.write(&#39;test.js&#39;);\n</code></pre>"
      },
      {
        "type": "param",
        "string": "{String} Filename",
        "name": "Filename",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} Filename</p>"
      },
      {
        "type": "param",
        "string": "{String} File's content",
        "name": "File's",
        "description": "<p>content</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{cb_file} Callback",
        "name": "Callback",
        "description": "",
        "types": [
          "cb_file"
        ],
        "typesDescription": "<a href=\"cb_file.html\">cb_file</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{cb_file} Callback</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<p>Create a new file. (Asynchronous)<br />Folders will be created if it doesn&#39;t exists.</p>",
      "summary": "<p>Create a new file. (Asynchronous)<br />Folders will be created if it doesn&#39;t exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 98,
    "codeStart": 110,
    "code": "file.write = function (filename, content, fn) {\n    dir.write(path.dirname(filename));\n    fs.writeFile(filename, content, function (err) {\n        if (err) {\n            console.log(err);\n        } else {\n          (fn && fn.call && fn.call());\n        }\n    });\n};",
    "ctx": {
      "type": "method",
      "receiver": "file",
      "name": "write",
      "string": "file.write()"
    }
  },
  {
    "tags": [
      {
        "type": "callback",
        "string": "cb_file",
        "html": "<p>cb_file</p>"
      }
    ],
    "description": {
      "full": "<p>Callback from module fs.file.write</p>",
      "summary": "<p>Callback from module fs.file.write</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 120,
    "codeStart": 124
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n    rinco.fs.file.read('test.js');",
        "html": "<pre><code>rinco.fs.file.read(&#39;test.js&#39;);\n</code></pre>"
      },
      {
        "type": "param",
        "string": "{String} Filename",
        "name": "Filename",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} Filename</p>"
      },
      {
        "type": "return",
        "string": "{boolean} True if success",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>True if success</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<p>Read a file.</p>",
      "summary": "<p>Read a file.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 125,
    "codeStart": 136,
    "code": "file.read = function (filename) {\n    if (file.exist(filename)) {\n        return fs.readFileSync(filename);\n    }\n    return false;\n};",
    "ctx": {
      "type": "method",
      "receiver": "file",
      "name": "read",
      "string": "file.read()"
    }
  },
  {
    "tags": [
      {
        "type": "example",
        "string": "\n    rinco.fs.file.exist('test.js');",
        "html": "<pre><code>rinco.fs.file.exist(&#39;test.js&#39;);\n</code></pre>"
      },
      {
        "type": "param",
        "string": "{String} Filename",
        "name": "Filename",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} Filename</p>"
      },
      {
        "type": "return",
        "string": "{boolean} True if exists",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>True if exists</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<p>Check if a file exists.</p>",
      "summary": "<p>Check if a file exists.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 143,
    "codeStart": 154,
    "code": "file.exist = function (filename) {\n    return fs.existsSync(filename);\n};\n\nmodule.exports = {\n    dir: dir,\n    file: file,\n    path: path\n};",
    "ctx": {
      "type": "method",
      "receiver": "file",
      "name": "exist",
      "string": "file.exist()"
    }
  }
]